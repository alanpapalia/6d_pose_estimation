// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: detector_options.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "detector_options.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DetectorOptions {

namespace {

const ::google::protobuf::Descriptor* ObjectOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* Options_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Options_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_detector_5foptions_2eproto() {
  protobuf_AddDesc_detector_5foptions_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "detector_options.proto");
  GOOGLE_CHECK(file != NULL);
  ObjectOptions_descriptor_ = file->message_type(0);
  static const int ObjectOptions_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectOptions, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectOptions, mesh_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectOptions, instances_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectOptions, nn_search_radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectOptions, icp_iterations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectOptions, align_z_axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectOptions, max_location_hypotheses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectOptions, should_detect_),
  };
  ObjectOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectOptions_descriptor_,
      ObjectOptions::default_instance_,
      ObjectOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectOptions));
  Options_descriptor_ = file->message_type(1);
  static const int Options_offsets_[33] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Options, object_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Options, forest_folder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Options, caffe_definition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Options, caffe_weights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Options, stride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Options, gpu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Options, num_threads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Options, max_depth_range_in_patch_in_m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Options, batch_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Options, fx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Options, fy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Options, cx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Options, cy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Options, search_single_object_instance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Options, search_single_object_in_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Options, use_color_similarity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Options, similarity_coeff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Options, inliers_coeff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Options, clutter_coeff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Options, location_score_coeff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Options, pose_score_coeff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Options, group_total_explain_coeff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Options, group_common_explain_coeff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Options, inliers_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Options, clutter_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Options, final_score_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Options, cluster_eps_angle_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Options, cluster_min_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Options, cluster_curvature_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Options, cluster_tolerance_near_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Options, cluster_tolerance_far_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Options, distance_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Options, are_objects_segmented_),
  };
  Options_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Options_descriptor_,
      Options::default_instance_,
      Options_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Options, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Options, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Options));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_detector_5foptions_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectOptions_descriptor_, &ObjectOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Options_descriptor_, &Options::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_detector_5foptions_2eproto() {
  delete ObjectOptions::default_instance_;
  delete ObjectOptions_reflection_;
  delete Options::default_instance_;
  delete Options_reflection_;
}

void protobuf_AddDesc_detector_5foptions_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026detector_options.proto\022\017DetectorOption"
    "s\"\341\001\n\rObjectOptions\022\014\n\004name\030\002 \002(\t\022\021\n\tmes"
    "h_file\030\003 \002(\t\022\024\n\tinstances\030\004 \001(\005:\0011\022\036\n\020nn"
    "_search_radius\030\005 \001(\002:\0040.01\022\032\n\016icp_iterat"
    "ions\030\006 \001(\005:\00260\022\033\n\014align_z_axis\030\007 \001(\010:\005fa"
    "lse\022#\n\027max_location_hypotheses\030\010 \001(\005:\00212"
    "\022\033\n\rshould_detect\030\t \001(\010:\004true\"\243\010\n\007Option"
    "s\0226\n\016object_options\030\001 \003(\0132\036.DetectorOpti"
    "ons.ObjectOptions\022\025\n\rforest_folder\030\002 \002(\t"
    "\022\030\n\020caffe_definition\030\003 \002(\t\022\025\n\rcaffe_weig"
    "hts\030\004 \002(\t\022\021\n\006stride\030\005 \001(\005:\0014\022\017\n\003gpu\030\006 \001("
    "\005:\002-1\022\026\n\013num_threads\030\007 \001(\005:\0014\022+\n\035max_dep"
    "th_range_in_patch_in_m\030\010 \001(\002:\0040.25\022\027\n\nba"
    "tch_size\030\t \001(\005:\003100\022\017\n\002fx\030\n \001(\002:\003575\022\017\n\002"
    "fy\030\013 \001(\002:\003575\022\021\n\002cx\030\014 \001(\002:\005319.5\022\021\n\002cy\030\r"
    " \001(\002:\005239.5\022,\n\035search_single_object_inst"
    "ance\030\016 \001(\010:\005false\022,\n\035search_single_objec"
    "t_in_group\030\017 \001(\010:\005false\022\"\n\024use_color_sim"
    "ilarity\030\020 \001(\010:\004true\022\034\n\020similarity_coeff\030"
    "\021 \001(\002:\00210\022\032\n\rinliers_coeff\030\022 \001(\002:\0032.5\022\032\n"
    "\rclutter_coeff\030\023 \001(\002:\0031.4\022\037\n\024location_sc"
    "ore_coeff\030\024 \001(\002:\0011\022\035\n\020pose_score_coeff\030\025"
    " \001(\002:\0030.7\022&\n\031group_total_explain_coeff\030\026"
    " \001(\002:\0030.5\022\'\n\032group_common_explain_coeff\030"
    "\027 \001(\002:\0030.3\022\036\n\021inliers_threshold\030\030 \001(\002:\0030"
    ".6\022\036\n\021clutter_threshold\030\031 \001(\002:\0030.6\022!\n\025fi"
    "nal_score_threshold\030\032 \001(\002:\00210\022)\n\033cluster"
    "_eps_angle_threshold\030\033 \001(\002:\0040.05\022\035\n\022clus"
    "ter_min_points\030\034 \001(\005:\0015\022(\n\033cluster_curva"
    "ture_threshold\030\035 \001(\002:\0030.1\022$\n\026cluster_tol"
    "erance_near\030\036 \001(\002:\0040.03\022#\n\025cluster_toler"
    "ance_far\030\037 \001(\002:\0040.05\022\037\n\022distance_thresho"
    "ld\030  \001(\002:\0031.5\022$\n\025are_objects_segmented\030!"
    " \001(\010:\005false", 1331);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "detector_options.proto", &protobuf_RegisterTypes);
  ObjectOptions::default_instance_ = new ObjectOptions();
  Options::default_instance_ = new Options();
  ObjectOptions::default_instance_->InitAsDefaultInstance();
  Options::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_detector_5foptions_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_detector_5foptions_2eproto {
  StaticDescriptorInitializer_detector_5foptions_2eproto() {
    protobuf_AddDesc_detector_5foptions_2eproto();
  }
} static_descriptor_initializer_detector_5foptions_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ObjectOptions::kNameFieldNumber;
const int ObjectOptions::kMeshFileFieldNumber;
const int ObjectOptions::kInstancesFieldNumber;
const int ObjectOptions::kNnSearchRadiusFieldNumber;
const int ObjectOptions::kIcpIterationsFieldNumber;
const int ObjectOptions::kAlignZAxisFieldNumber;
const int ObjectOptions::kMaxLocationHypothesesFieldNumber;
const int ObjectOptions::kShouldDetectFieldNumber;
#endif  // !_MSC_VER

ObjectOptions::ObjectOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DetectorOptions.ObjectOptions)
}

void ObjectOptions::InitAsDefaultInstance() {
}

ObjectOptions::ObjectOptions(const ObjectOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DetectorOptions.ObjectOptions)
}

void ObjectOptions::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mesh_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instances_ = 1;
  nn_search_radius_ = 0.01f;
  icp_iterations_ = 60;
  align_z_axis_ = false;
  max_location_hypotheses_ = 12;
  should_detect_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectOptions::~ObjectOptions() {
  // @@protoc_insertion_point(destructor:DetectorOptions.ObjectOptions)
  SharedDtor();
}

void ObjectOptions::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (mesh_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mesh_file_;
  }
  if (this != default_instance_) {
  }
}

void ObjectOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectOptions_descriptor_;
}

const ObjectOptions& ObjectOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_detector_5foptions_2eproto();
  return *default_instance_;
}

ObjectOptions* ObjectOptions::default_instance_ = NULL;

ObjectOptions* ObjectOptions::New() const {
  return new ObjectOptions;
}

void ObjectOptions::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_mesh_file()) {
      if (mesh_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mesh_file_->clear();
      }
    }
    instances_ = 1;
    nn_search_radius_ = 0.01f;
    icp_iterations_ = 60;
    align_z_axis_ = false;
    max_location_hypotheses_ = 12;
    should_detect_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DetectorOptions.ObjectOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mesh_file;
        break;
      }

      // required string mesh_file = 3;
      case 3: {
        if (tag == 26) {
         parse_mesh_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mesh_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mesh_file().data(), this->mesh_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mesh_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_instances;
        break;
      }

      // optional int32 instances = 4 [default = 1];
      case 4: {
        if (tag == 32) {
         parse_instances:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instances_)));
          set_has_instances();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_nn_search_radius;
        break;
      }

      // optional float nn_search_radius = 5 [default = 0.01];
      case 5: {
        if (tag == 45) {
         parse_nn_search_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &nn_search_radius_)));
          set_has_nn_search_radius();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_icp_iterations;
        break;
      }

      // optional int32 icp_iterations = 6 [default = 60];
      case 6: {
        if (tag == 48) {
         parse_icp_iterations:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icp_iterations_)));
          set_has_icp_iterations();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_align_z_axis;
        break;
      }

      // optional bool align_z_axis = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_align_z_axis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &align_z_axis_)));
          set_has_align_z_axis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_max_location_hypotheses;
        break;
      }

      // optional int32 max_location_hypotheses = 8 [default = 12];
      case 8: {
        if (tag == 64) {
         parse_max_location_hypotheses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_location_hypotheses_)));
          set_has_max_location_hypotheses();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_should_detect;
        break;
      }

      // optional bool should_detect = 9 [default = true];
      case 9: {
        if (tag == 72) {
         parse_should_detect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &should_detect_)));
          set_has_should_detect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DetectorOptions.ObjectOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DetectorOptions.ObjectOptions)
  return false;
#undef DO_
}

void ObjectOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DetectorOptions.ObjectOptions)
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required string mesh_file = 3;
  if (has_mesh_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mesh_file().data(), this->mesh_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mesh_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->mesh_file(), output);
  }

  // optional int32 instances = 4 [default = 1];
  if (has_instances()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->instances(), output);
  }

  // optional float nn_search_radius = 5 [default = 0.01];
  if (has_nn_search_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->nn_search_radius(), output);
  }

  // optional int32 icp_iterations = 6 [default = 60];
  if (has_icp_iterations()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->icp_iterations(), output);
  }

  // optional bool align_z_axis = 7 [default = false];
  if (has_align_z_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->align_z_axis(), output);
  }

  // optional int32 max_location_hypotheses = 8 [default = 12];
  if (has_max_location_hypotheses()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->max_location_hypotheses(), output);
  }

  // optional bool should_detect = 9 [default = true];
  if (has_should_detect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->should_detect(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DetectorOptions.ObjectOptions)
}

::google::protobuf::uint8* ObjectOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DetectorOptions.ObjectOptions)
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required string mesh_file = 3;
  if (has_mesh_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mesh_file().data(), this->mesh_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mesh_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mesh_file(), target);
  }

  // optional int32 instances = 4 [default = 1];
  if (has_instances()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->instances(), target);
  }

  // optional float nn_search_radius = 5 [default = 0.01];
  if (has_nn_search_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->nn_search_radius(), target);
  }

  // optional int32 icp_iterations = 6 [default = 60];
  if (has_icp_iterations()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->icp_iterations(), target);
  }

  // optional bool align_z_axis = 7 [default = false];
  if (has_align_z_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->align_z_axis(), target);
  }

  // optional int32 max_location_hypotheses = 8 [default = 12];
  if (has_max_location_hypotheses()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->max_location_hypotheses(), target);
  }

  // optional bool should_detect = 9 [default = true];
  if (has_should_detect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->should_detect(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DetectorOptions.ObjectOptions)
  return target;
}

int ObjectOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string mesh_file = 3;
    if (has_mesh_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mesh_file());
    }

    // optional int32 instances = 4 [default = 1];
    if (has_instances()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instances());
    }

    // optional float nn_search_radius = 5 [default = 0.01];
    if (has_nn_search_radius()) {
      total_size += 1 + 4;
    }

    // optional int32 icp_iterations = 6 [default = 60];
    if (has_icp_iterations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icp_iterations());
    }

    // optional bool align_z_axis = 7 [default = false];
    if (has_align_z_axis()) {
      total_size += 1 + 1;
    }

    // optional int32 max_location_hypotheses = 8 [default = 12];
    if (has_max_location_hypotheses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_location_hypotheses());
    }

    // optional bool should_detect = 9 [default = true];
    if (has_should_detect()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectOptions::MergeFrom(const ObjectOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_mesh_file()) {
      set_mesh_file(from.mesh_file());
    }
    if (from.has_instances()) {
      set_instances(from.instances());
    }
    if (from.has_nn_search_radius()) {
      set_nn_search_radius(from.nn_search_radius());
    }
    if (from.has_icp_iterations()) {
      set_icp_iterations(from.icp_iterations());
    }
    if (from.has_align_z_axis()) {
      set_align_z_axis(from.align_z_axis());
    }
    if (from.has_max_location_hypotheses()) {
      set_max_location_hypotheses(from.max_location_hypotheses());
    }
    if (from.has_should_detect()) {
      set_should_detect(from.should_detect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectOptions::CopyFrom(const ObjectOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectOptions::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ObjectOptions::Swap(ObjectOptions* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(mesh_file_, other->mesh_file_);
    std::swap(instances_, other->instances_);
    std::swap(nn_search_radius_, other->nn_search_radius_);
    std::swap(icp_iterations_, other->icp_iterations_);
    std::swap(align_z_axis_, other->align_z_axis_);
    std::swap(max_location_hypotheses_, other->max_location_hypotheses_);
    std::swap(should_detect_, other->should_detect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectOptions_descriptor_;
  metadata.reflection = ObjectOptions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Options::kObjectOptionsFieldNumber;
const int Options::kForestFolderFieldNumber;
const int Options::kCaffeDefinitionFieldNumber;
const int Options::kCaffeWeightsFieldNumber;
const int Options::kStrideFieldNumber;
const int Options::kGpuFieldNumber;
const int Options::kNumThreadsFieldNumber;
const int Options::kMaxDepthRangeInPatchInMFieldNumber;
const int Options::kBatchSizeFieldNumber;
const int Options::kFxFieldNumber;
const int Options::kFyFieldNumber;
const int Options::kCxFieldNumber;
const int Options::kCyFieldNumber;
const int Options::kSearchSingleObjectInstanceFieldNumber;
const int Options::kSearchSingleObjectInGroupFieldNumber;
const int Options::kUseColorSimilarityFieldNumber;
const int Options::kSimilarityCoeffFieldNumber;
const int Options::kInliersCoeffFieldNumber;
const int Options::kClutterCoeffFieldNumber;
const int Options::kLocationScoreCoeffFieldNumber;
const int Options::kPoseScoreCoeffFieldNumber;
const int Options::kGroupTotalExplainCoeffFieldNumber;
const int Options::kGroupCommonExplainCoeffFieldNumber;
const int Options::kInliersThresholdFieldNumber;
const int Options::kClutterThresholdFieldNumber;
const int Options::kFinalScoreThresholdFieldNumber;
const int Options::kClusterEpsAngleThresholdFieldNumber;
const int Options::kClusterMinPointsFieldNumber;
const int Options::kClusterCurvatureThresholdFieldNumber;
const int Options::kClusterToleranceNearFieldNumber;
const int Options::kClusterToleranceFarFieldNumber;
const int Options::kDistanceThresholdFieldNumber;
const int Options::kAreObjectsSegmentedFieldNumber;
#endif  // !_MSC_VER

Options::Options()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DetectorOptions.Options)
}

void Options::InitAsDefaultInstance() {
}

Options::Options(const Options& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DetectorOptions.Options)
}

void Options::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  forest_folder_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  caffe_definition_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  caffe_weights_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stride_ = 4;
  gpu_ = -1;
  num_threads_ = 4;
  max_depth_range_in_patch_in_m_ = 0.25f;
  batch_size_ = 100;
  fx_ = 575;
  fy_ = 575;
  cx_ = 319.5f;
  cy_ = 239.5f;
  search_single_object_instance_ = false;
  search_single_object_in_group_ = false;
  use_color_similarity_ = true;
  similarity_coeff_ = 10;
  inliers_coeff_ = 2.5f;
  clutter_coeff_ = 1.4f;
  location_score_coeff_ = 1;
  pose_score_coeff_ = 0.7f;
  group_total_explain_coeff_ = 0.5f;
  group_common_explain_coeff_ = 0.3f;
  inliers_threshold_ = 0.6f;
  clutter_threshold_ = 0.6f;
  final_score_threshold_ = 10;
  cluster_eps_angle_threshold_ = 0.05f;
  cluster_min_points_ = 5;
  cluster_curvature_threshold_ = 0.1f;
  cluster_tolerance_near_ = 0.03f;
  cluster_tolerance_far_ = 0.05f;
  distance_threshold_ = 1.5f;
  are_objects_segmented_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Options::~Options() {
  // @@protoc_insertion_point(destructor:DetectorOptions.Options)
  SharedDtor();
}

void Options::SharedDtor() {
  if (forest_folder_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete forest_folder_;
  }
  if (caffe_definition_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete caffe_definition_;
  }
  if (caffe_weights_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete caffe_weights_;
  }
  if (this != default_instance_) {
  }
}

void Options::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Options::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Options_descriptor_;
}

const Options& Options::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_detector_5foptions_2eproto();
  return *default_instance_;
}

Options* Options::default_instance_ = NULL;

Options* Options::New() const {
  return new Options;
}

void Options::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Options*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 254) {
    if (has_forest_folder()) {
      if (forest_folder_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        forest_folder_->clear();
      }
    }
    if (has_caffe_definition()) {
      if (caffe_definition_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        caffe_definition_->clear();
      }
    }
    if (has_caffe_weights()) {
      if (caffe_weights_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        caffe_weights_->clear();
      }
    }
    stride_ = 4;
    gpu_ = -1;
    num_threads_ = 4;
    max_depth_range_in_patch_in_m_ = 0.25f;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(search_single_object_instance_, search_single_object_in_group_);
    batch_size_ = 100;
    fx_ = 575;
    fy_ = 575;
    cx_ = 319.5f;
    cy_ = 239.5f;
    use_color_similarity_ = true;
  }
  if (_has_bits_[16 / 32] & 16711680) {
    similarity_coeff_ = 10;
    inliers_coeff_ = 2.5f;
    clutter_coeff_ = 1.4f;
    location_score_coeff_ = 1;
    pose_score_coeff_ = 0.7f;
    group_total_explain_coeff_ = 0.5f;
    group_common_explain_coeff_ = 0.3f;
    inliers_threshold_ = 0.6f;
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    clutter_threshold_ = 0.6f;
    final_score_threshold_ = 10;
    cluster_eps_angle_threshold_ = 0.05f;
    cluster_min_points_ = 5;
    cluster_curvature_threshold_ = 0.1f;
    cluster_tolerance_near_ = 0.03f;
    cluster_tolerance_far_ = 0.05f;
    distance_threshold_ = 1.5f;
  }
  are_objects_segmented_ = false;

#undef OFFSET_OF_FIELD_
#undef ZR_

  object_options_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Options::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DetectorOptions.Options)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DetectorOptions.ObjectOptions object_options = 1;
      case 1: {
        if (tag == 10) {
         parse_object_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_object_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_object_options;
        if (input->ExpectTag(18)) goto parse_forest_folder;
        break;
      }

      // required string forest_folder = 2;
      case 2: {
        if (tag == 18) {
         parse_forest_folder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_forest_folder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->forest_folder().data(), this->forest_folder().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "forest_folder");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_caffe_definition;
        break;
      }

      // required string caffe_definition = 3;
      case 3: {
        if (tag == 26) {
         parse_caffe_definition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_caffe_definition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->caffe_definition().data(), this->caffe_definition().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe_definition");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_caffe_weights;
        break;
      }

      // required string caffe_weights = 4;
      case 4: {
        if (tag == 34) {
         parse_caffe_weights:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_caffe_weights()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->caffe_weights().data(), this->caffe_weights().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe_weights");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_stride;
        break;
      }

      // optional int32 stride = 5 [default = 4];
      case 5: {
        if (tag == 40) {
         parse_stride:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stride_)));
          set_has_stride();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_gpu;
        break;
      }

      // optional int32 gpu = 6 [default = -1];
      case 6: {
        if (tag == 48) {
         parse_gpu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gpu_)));
          set_has_gpu();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_num_threads;
        break;
      }

      // optional int32 num_threads = 7 [default = 4];
      case 7: {
        if (tag == 56) {
         parse_num_threads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_threads_)));
          set_has_num_threads();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_max_depth_range_in_patch_in_m;
        break;
      }

      // optional float max_depth_range_in_patch_in_m = 8 [default = 0.25];
      case 8: {
        if (tag == 69) {
         parse_max_depth_range_in_patch_in_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_depth_range_in_patch_in_m_)));
          set_has_max_depth_range_in_patch_in_m();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_batch_size;
        break;
      }

      // optional int32 batch_size = 9 [default = 100];
      case 9: {
        if (tag == 72) {
         parse_batch_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batch_size_)));
          set_has_batch_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_fx;
        break;
      }

      // optional float fx = 10 [default = 575];
      case 10: {
        if (tag == 85) {
         parse_fx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fx_)));
          set_has_fx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_fy;
        break;
      }

      // optional float fy = 11 [default = 575];
      case 11: {
        if (tag == 93) {
         parse_fy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fy_)));
          set_has_fy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_cx;
        break;
      }

      // optional float cx = 12 [default = 319.5];
      case 12: {
        if (tag == 101) {
         parse_cx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cx_)));
          set_has_cx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_cy;
        break;
      }

      // optional float cy = 13 [default = 239.5];
      case 13: {
        if (tag == 109) {
         parse_cy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cy_)));
          set_has_cy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_search_single_object_instance;
        break;
      }

      // optional bool search_single_object_instance = 14 [default = false];
      case 14: {
        if (tag == 112) {
         parse_search_single_object_instance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &search_single_object_instance_)));
          set_has_search_single_object_instance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_search_single_object_in_group;
        break;
      }

      // optional bool search_single_object_in_group = 15 [default = false];
      case 15: {
        if (tag == 120) {
         parse_search_single_object_in_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &search_single_object_in_group_)));
          set_has_search_single_object_in_group();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_use_color_similarity;
        break;
      }

      // optional bool use_color_similarity = 16 [default = true];
      case 16: {
        if (tag == 128) {
         parse_use_color_similarity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_color_similarity_)));
          set_has_use_color_similarity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(141)) goto parse_similarity_coeff;
        break;
      }

      // optional float similarity_coeff = 17 [default = 10];
      case 17: {
        if (tag == 141) {
         parse_similarity_coeff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &similarity_coeff_)));
          set_has_similarity_coeff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(149)) goto parse_inliers_coeff;
        break;
      }

      // optional float inliers_coeff = 18 [default = 2.5];
      case 18: {
        if (tag == 149) {
         parse_inliers_coeff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &inliers_coeff_)));
          set_has_inliers_coeff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(157)) goto parse_clutter_coeff;
        break;
      }

      // optional float clutter_coeff = 19 [default = 1.4];
      case 19: {
        if (tag == 157) {
         parse_clutter_coeff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &clutter_coeff_)));
          set_has_clutter_coeff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(165)) goto parse_location_score_coeff;
        break;
      }

      // optional float location_score_coeff = 20 [default = 1];
      case 20: {
        if (tag == 165) {
         parse_location_score_coeff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &location_score_coeff_)));
          set_has_location_score_coeff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(173)) goto parse_pose_score_coeff;
        break;
      }

      // optional float pose_score_coeff = 21 [default = 0.7];
      case 21: {
        if (tag == 173) {
         parse_pose_score_coeff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pose_score_coeff_)));
          set_has_pose_score_coeff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(181)) goto parse_group_total_explain_coeff;
        break;
      }

      // optional float group_total_explain_coeff = 22 [default = 0.5];
      case 22: {
        if (tag == 181) {
         parse_group_total_explain_coeff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &group_total_explain_coeff_)));
          set_has_group_total_explain_coeff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(189)) goto parse_group_common_explain_coeff;
        break;
      }

      // optional float group_common_explain_coeff = 23 [default = 0.3];
      case 23: {
        if (tag == 189) {
         parse_group_common_explain_coeff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &group_common_explain_coeff_)));
          set_has_group_common_explain_coeff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(197)) goto parse_inliers_threshold;
        break;
      }

      // optional float inliers_threshold = 24 [default = 0.6];
      case 24: {
        if (tag == 197) {
         parse_inliers_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &inliers_threshold_)));
          set_has_inliers_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(205)) goto parse_clutter_threshold;
        break;
      }

      // optional float clutter_threshold = 25 [default = 0.6];
      case 25: {
        if (tag == 205) {
         parse_clutter_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &clutter_threshold_)));
          set_has_clutter_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(213)) goto parse_final_score_threshold;
        break;
      }

      // optional float final_score_threshold = 26 [default = 10];
      case 26: {
        if (tag == 213) {
         parse_final_score_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &final_score_threshold_)));
          set_has_final_score_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(221)) goto parse_cluster_eps_angle_threshold;
        break;
      }

      // optional float cluster_eps_angle_threshold = 27 [default = 0.05];
      case 27: {
        if (tag == 221) {
         parse_cluster_eps_angle_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cluster_eps_angle_threshold_)));
          set_has_cluster_eps_angle_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_cluster_min_points;
        break;
      }

      // optional int32 cluster_min_points = 28 [default = 5];
      case 28: {
        if (tag == 224) {
         parse_cluster_min_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cluster_min_points_)));
          set_has_cluster_min_points();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(237)) goto parse_cluster_curvature_threshold;
        break;
      }

      // optional float cluster_curvature_threshold = 29 [default = 0.1];
      case 29: {
        if (tag == 237) {
         parse_cluster_curvature_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cluster_curvature_threshold_)));
          set_has_cluster_curvature_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(245)) goto parse_cluster_tolerance_near;
        break;
      }

      // optional float cluster_tolerance_near = 30 [default = 0.03];
      case 30: {
        if (tag == 245) {
         parse_cluster_tolerance_near:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cluster_tolerance_near_)));
          set_has_cluster_tolerance_near();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(253)) goto parse_cluster_tolerance_far;
        break;
      }

      // optional float cluster_tolerance_far = 31 [default = 0.05];
      case 31: {
        if (tag == 253) {
         parse_cluster_tolerance_far:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cluster_tolerance_far_)));
          set_has_cluster_tolerance_far();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(261)) goto parse_distance_threshold;
        break;
      }

      // optional float distance_threshold = 32 [default = 1.5];
      case 32: {
        if (tag == 261) {
         parse_distance_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_threshold_)));
          set_has_distance_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_are_objects_segmented;
        break;
      }

      // optional bool are_objects_segmented = 33 [default = false];
      case 33: {
        if (tag == 264) {
         parse_are_objects_segmented:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &are_objects_segmented_)));
          set_has_are_objects_segmented();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DetectorOptions.Options)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DetectorOptions.Options)
  return false;
#undef DO_
}

void Options::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DetectorOptions.Options)
  // repeated .DetectorOptions.ObjectOptions object_options = 1;
  for (int i = 0; i < this->object_options_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->object_options(i), output);
  }

  // required string forest_folder = 2;
  if (has_forest_folder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->forest_folder().data(), this->forest_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "forest_folder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->forest_folder(), output);
  }

  // required string caffe_definition = 3;
  if (has_caffe_definition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->caffe_definition().data(), this->caffe_definition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe_definition");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->caffe_definition(), output);
  }

  // required string caffe_weights = 4;
  if (has_caffe_weights()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->caffe_weights().data(), this->caffe_weights().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe_weights");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->caffe_weights(), output);
  }

  // optional int32 stride = 5 [default = 4];
  if (has_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->stride(), output);
  }

  // optional int32 gpu = 6 [default = -1];
  if (has_gpu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gpu(), output);
  }

  // optional int32 num_threads = 7 [default = 4];
  if (has_num_threads()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->num_threads(), output);
  }

  // optional float max_depth_range_in_patch_in_m = 8 [default = 0.25];
  if (has_max_depth_range_in_patch_in_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->max_depth_range_in_patch_in_m(), output);
  }

  // optional int32 batch_size = 9 [default = 100];
  if (has_batch_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->batch_size(), output);
  }

  // optional float fx = 10 [default = 575];
  if (has_fx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->fx(), output);
  }

  // optional float fy = 11 [default = 575];
  if (has_fy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->fy(), output);
  }

  // optional float cx = 12 [default = 319.5];
  if (has_cx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->cx(), output);
  }

  // optional float cy = 13 [default = 239.5];
  if (has_cy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->cy(), output);
  }

  // optional bool search_single_object_instance = 14 [default = false];
  if (has_search_single_object_instance()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->search_single_object_instance(), output);
  }

  // optional bool search_single_object_in_group = 15 [default = false];
  if (has_search_single_object_in_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->search_single_object_in_group(), output);
  }

  // optional bool use_color_similarity = 16 [default = true];
  if (has_use_color_similarity()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->use_color_similarity(), output);
  }

  // optional float similarity_coeff = 17 [default = 10];
  if (has_similarity_coeff()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->similarity_coeff(), output);
  }

  // optional float inliers_coeff = 18 [default = 2.5];
  if (has_inliers_coeff()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->inliers_coeff(), output);
  }

  // optional float clutter_coeff = 19 [default = 1.4];
  if (has_clutter_coeff()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->clutter_coeff(), output);
  }

  // optional float location_score_coeff = 20 [default = 1];
  if (has_location_score_coeff()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->location_score_coeff(), output);
  }

  // optional float pose_score_coeff = 21 [default = 0.7];
  if (has_pose_score_coeff()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->pose_score_coeff(), output);
  }

  // optional float group_total_explain_coeff = 22 [default = 0.5];
  if (has_group_total_explain_coeff()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->group_total_explain_coeff(), output);
  }

  // optional float group_common_explain_coeff = 23 [default = 0.3];
  if (has_group_common_explain_coeff()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->group_common_explain_coeff(), output);
  }

  // optional float inliers_threshold = 24 [default = 0.6];
  if (has_inliers_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->inliers_threshold(), output);
  }

  // optional float clutter_threshold = 25 [default = 0.6];
  if (has_clutter_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->clutter_threshold(), output);
  }

  // optional float final_score_threshold = 26 [default = 10];
  if (has_final_score_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->final_score_threshold(), output);
  }

  // optional float cluster_eps_angle_threshold = 27 [default = 0.05];
  if (has_cluster_eps_angle_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->cluster_eps_angle_threshold(), output);
  }

  // optional int32 cluster_min_points = 28 [default = 5];
  if (has_cluster_min_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->cluster_min_points(), output);
  }

  // optional float cluster_curvature_threshold = 29 [default = 0.1];
  if (has_cluster_curvature_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(29, this->cluster_curvature_threshold(), output);
  }

  // optional float cluster_tolerance_near = 30 [default = 0.03];
  if (has_cluster_tolerance_near()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->cluster_tolerance_near(), output);
  }

  // optional float cluster_tolerance_far = 31 [default = 0.05];
  if (has_cluster_tolerance_far()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->cluster_tolerance_far(), output);
  }

  // optional float distance_threshold = 32 [default = 1.5];
  if (has_distance_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(32, this->distance_threshold(), output);
  }

  // optional bool are_objects_segmented = 33 [default = false];
  if (has_are_objects_segmented()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(33, this->are_objects_segmented(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DetectorOptions.Options)
}

::google::protobuf::uint8* Options::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DetectorOptions.Options)
  // repeated .DetectorOptions.ObjectOptions object_options = 1;
  for (int i = 0; i < this->object_options_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->object_options(i), target);
  }

  // required string forest_folder = 2;
  if (has_forest_folder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->forest_folder().data(), this->forest_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "forest_folder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->forest_folder(), target);
  }

  // required string caffe_definition = 3;
  if (has_caffe_definition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->caffe_definition().data(), this->caffe_definition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe_definition");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->caffe_definition(), target);
  }

  // required string caffe_weights = 4;
  if (has_caffe_weights()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->caffe_weights().data(), this->caffe_weights().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe_weights");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->caffe_weights(), target);
  }

  // optional int32 stride = 5 [default = 4];
  if (has_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->stride(), target);
  }

  // optional int32 gpu = 6 [default = -1];
  if (has_gpu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gpu(), target);
  }

  // optional int32 num_threads = 7 [default = 4];
  if (has_num_threads()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->num_threads(), target);
  }

  // optional float max_depth_range_in_patch_in_m = 8 [default = 0.25];
  if (has_max_depth_range_in_patch_in_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->max_depth_range_in_patch_in_m(), target);
  }

  // optional int32 batch_size = 9 [default = 100];
  if (has_batch_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->batch_size(), target);
  }

  // optional float fx = 10 [default = 575];
  if (has_fx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->fx(), target);
  }

  // optional float fy = 11 [default = 575];
  if (has_fy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->fy(), target);
  }

  // optional float cx = 12 [default = 319.5];
  if (has_cx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->cx(), target);
  }

  // optional float cy = 13 [default = 239.5];
  if (has_cy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->cy(), target);
  }

  // optional bool search_single_object_instance = 14 [default = false];
  if (has_search_single_object_instance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->search_single_object_instance(), target);
  }

  // optional bool search_single_object_in_group = 15 [default = false];
  if (has_search_single_object_in_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->search_single_object_in_group(), target);
  }

  // optional bool use_color_similarity = 16 [default = true];
  if (has_use_color_similarity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->use_color_similarity(), target);
  }

  // optional float similarity_coeff = 17 [default = 10];
  if (has_similarity_coeff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->similarity_coeff(), target);
  }

  // optional float inliers_coeff = 18 [default = 2.5];
  if (has_inliers_coeff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->inliers_coeff(), target);
  }

  // optional float clutter_coeff = 19 [default = 1.4];
  if (has_clutter_coeff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->clutter_coeff(), target);
  }

  // optional float location_score_coeff = 20 [default = 1];
  if (has_location_score_coeff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->location_score_coeff(), target);
  }

  // optional float pose_score_coeff = 21 [default = 0.7];
  if (has_pose_score_coeff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->pose_score_coeff(), target);
  }

  // optional float group_total_explain_coeff = 22 [default = 0.5];
  if (has_group_total_explain_coeff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->group_total_explain_coeff(), target);
  }

  // optional float group_common_explain_coeff = 23 [default = 0.3];
  if (has_group_common_explain_coeff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->group_common_explain_coeff(), target);
  }

  // optional float inliers_threshold = 24 [default = 0.6];
  if (has_inliers_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->inliers_threshold(), target);
  }

  // optional float clutter_threshold = 25 [default = 0.6];
  if (has_clutter_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->clutter_threshold(), target);
  }

  // optional float final_score_threshold = 26 [default = 10];
  if (has_final_score_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->final_score_threshold(), target);
  }

  // optional float cluster_eps_angle_threshold = 27 [default = 0.05];
  if (has_cluster_eps_angle_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(27, this->cluster_eps_angle_threshold(), target);
  }

  // optional int32 cluster_min_points = 28 [default = 5];
  if (has_cluster_min_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->cluster_min_points(), target);
  }

  // optional float cluster_curvature_threshold = 29 [default = 0.1];
  if (has_cluster_curvature_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(29, this->cluster_curvature_threshold(), target);
  }

  // optional float cluster_tolerance_near = 30 [default = 0.03];
  if (has_cluster_tolerance_near()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(30, this->cluster_tolerance_near(), target);
  }

  // optional float cluster_tolerance_far = 31 [default = 0.05];
  if (has_cluster_tolerance_far()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(31, this->cluster_tolerance_far(), target);
  }

  // optional float distance_threshold = 32 [default = 1.5];
  if (has_distance_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(32, this->distance_threshold(), target);
  }

  // optional bool are_objects_segmented = 33 [default = false];
  if (has_are_objects_segmented()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(33, this->are_objects_segmented(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DetectorOptions.Options)
  return target;
}

int Options::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required string forest_folder = 2;
    if (has_forest_folder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->forest_folder());
    }

    // required string caffe_definition = 3;
    if (has_caffe_definition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->caffe_definition());
    }

    // required string caffe_weights = 4;
    if (has_caffe_weights()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->caffe_weights());
    }

    // optional int32 stride = 5 [default = 4];
    if (has_stride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stride());
    }

    // optional int32 gpu = 6 [default = -1];
    if (has_gpu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gpu());
    }

    // optional int32 num_threads = 7 [default = 4];
    if (has_num_threads()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_threads());
    }

    // optional float max_depth_range_in_patch_in_m = 8 [default = 0.25];
    if (has_max_depth_range_in_patch_in_m()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 batch_size = 9 [default = 100];
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->batch_size());
    }

    // optional float fx = 10 [default = 575];
    if (has_fx()) {
      total_size += 1 + 4;
    }

    // optional float fy = 11 [default = 575];
    if (has_fy()) {
      total_size += 1 + 4;
    }

    // optional float cx = 12 [default = 319.5];
    if (has_cx()) {
      total_size += 1 + 4;
    }

    // optional float cy = 13 [default = 239.5];
    if (has_cy()) {
      total_size += 1 + 4;
    }

    // optional bool search_single_object_instance = 14 [default = false];
    if (has_search_single_object_instance()) {
      total_size += 1 + 1;
    }

    // optional bool search_single_object_in_group = 15 [default = false];
    if (has_search_single_object_in_group()) {
      total_size += 1 + 1;
    }

    // optional bool use_color_similarity = 16 [default = true];
    if (has_use_color_similarity()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float similarity_coeff = 17 [default = 10];
    if (has_similarity_coeff()) {
      total_size += 2 + 4;
    }

    // optional float inliers_coeff = 18 [default = 2.5];
    if (has_inliers_coeff()) {
      total_size += 2 + 4;
    }

    // optional float clutter_coeff = 19 [default = 1.4];
    if (has_clutter_coeff()) {
      total_size += 2 + 4;
    }

    // optional float location_score_coeff = 20 [default = 1];
    if (has_location_score_coeff()) {
      total_size += 2 + 4;
    }

    // optional float pose_score_coeff = 21 [default = 0.7];
    if (has_pose_score_coeff()) {
      total_size += 2 + 4;
    }

    // optional float group_total_explain_coeff = 22 [default = 0.5];
    if (has_group_total_explain_coeff()) {
      total_size += 2 + 4;
    }

    // optional float group_common_explain_coeff = 23 [default = 0.3];
    if (has_group_common_explain_coeff()) {
      total_size += 2 + 4;
    }

    // optional float inliers_threshold = 24 [default = 0.6];
    if (has_inliers_threshold()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional float clutter_threshold = 25 [default = 0.6];
    if (has_clutter_threshold()) {
      total_size += 2 + 4;
    }

    // optional float final_score_threshold = 26 [default = 10];
    if (has_final_score_threshold()) {
      total_size += 2 + 4;
    }

    // optional float cluster_eps_angle_threshold = 27 [default = 0.05];
    if (has_cluster_eps_angle_threshold()) {
      total_size += 2 + 4;
    }

    // optional int32 cluster_min_points = 28 [default = 5];
    if (has_cluster_min_points()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cluster_min_points());
    }

    // optional float cluster_curvature_threshold = 29 [default = 0.1];
    if (has_cluster_curvature_threshold()) {
      total_size += 2 + 4;
    }

    // optional float cluster_tolerance_near = 30 [default = 0.03];
    if (has_cluster_tolerance_near()) {
      total_size += 2 + 4;
    }

    // optional float cluster_tolerance_far = 31 [default = 0.05];
    if (has_cluster_tolerance_far()) {
      total_size += 2 + 4;
    }

    // optional float distance_threshold = 32 [default = 1.5];
    if (has_distance_threshold()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional bool are_objects_segmented = 33 [default = false];
    if (has_are_objects_segmented()) {
      total_size += 2 + 1;
    }

  }
  // repeated .DetectorOptions.ObjectOptions object_options = 1;
  total_size += 1 * this->object_options_size();
  for (int i = 0; i < this->object_options_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->object_options(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Options::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Options* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Options*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Options::MergeFrom(const Options& from) {
  GOOGLE_CHECK_NE(&from, this);
  object_options_.MergeFrom(from.object_options_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_forest_folder()) {
      set_forest_folder(from.forest_folder());
    }
    if (from.has_caffe_definition()) {
      set_caffe_definition(from.caffe_definition());
    }
    if (from.has_caffe_weights()) {
      set_caffe_weights(from.caffe_weights());
    }
    if (from.has_stride()) {
      set_stride(from.stride());
    }
    if (from.has_gpu()) {
      set_gpu(from.gpu());
    }
    if (from.has_num_threads()) {
      set_num_threads(from.num_threads());
    }
    if (from.has_max_depth_range_in_patch_in_m()) {
      set_max_depth_range_in_patch_in_m(from.max_depth_range_in_patch_in_m());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_batch_size()) {
      set_batch_size(from.batch_size());
    }
    if (from.has_fx()) {
      set_fx(from.fx());
    }
    if (from.has_fy()) {
      set_fy(from.fy());
    }
    if (from.has_cx()) {
      set_cx(from.cx());
    }
    if (from.has_cy()) {
      set_cy(from.cy());
    }
    if (from.has_search_single_object_instance()) {
      set_search_single_object_instance(from.search_single_object_instance());
    }
    if (from.has_search_single_object_in_group()) {
      set_search_single_object_in_group(from.search_single_object_in_group());
    }
    if (from.has_use_color_similarity()) {
      set_use_color_similarity(from.use_color_similarity());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_similarity_coeff()) {
      set_similarity_coeff(from.similarity_coeff());
    }
    if (from.has_inliers_coeff()) {
      set_inliers_coeff(from.inliers_coeff());
    }
    if (from.has_clutter_coeff()) {
      set_clutter_coeff(from.clutter_coeff());
    }
    if (from.has_location_score_coeff()) {
      set_location_score_coeff(from.location_score_coeff());
    }
    if (from.has_pose_score_coeff()) {
      set_pose_score_coeff(from.pose_score_coeff());
    }
    if (from.has_group_total_explain_coeff()) {
      set_group_total_explain_coeff(from.group_total_explain_coeff());
    }
    if (from.has_group_common_explain_coeff()) {
      set_group_common_explain_coeff(from.group_common_explain_coeff());
    }
    if (from.has_inliers_threshold()) {
      set_inliers_threshold(from.inliers_threshold());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_clutter_threshold()) {
      set_clutter_threshold(from.clutter_threshold());
    }
    if (from.has_final_score_threshold()) {
      set_final_score_threshold(from.final_score_threshold());
    }
    if (from.has_cluster_eps_angle_threshold()) {
      set_cluster_eps_angle_threshold(from.cluster_eps_angle_threshold());
    }
    if (from.has_cluster_min_points()) {
      set_cluster_min_points(from.cluster_min_points());
    }
    if (from.has_cluster_curvature_threshold()) {
      set_cluster_curvature_threshold(from.cluster_curvature_threshold());
    }
    if (from.has_cluster_tolerance_near()) {
      set_cluster_tolerance_near(from.cluster_tolerance_near());
    }
    if (from.has_cluster_tolerance_far()) {
      set_cluster_tolerance_far(from.cluster_tolerance_far());
    }
    if (from.has_distance_threshold()) {
      set_distance_threshold(from.distance_threshold());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_are_objects_segmented()) {
      set_are_objects_segmented(from.are_objects_segmented());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Options::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Options::CopyFrom(const Options& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Options::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->object_options())) return false;
  return true;
}

void Options::Swap(Options* other) {
  if (other != this) {
    object_options_.Swap(&other->object_options_);
    std::swap(forest_folder_, other->forest_folder_);
    std::swap(caffe_definition_, other->caffe_definition_);
    std::swap(caffe_weights_, other->caffe_weights_);
    std::swap(stride_, other->stride_);
    std::swap(gpu_, other->gpu_);
    std::swap(num_threads_, other->num_threads_);
    std::swap(max_depth_range_in_patch_in_m_, other->max_depth_range_in_patch_in_m_);
    std::swap(batch_size_, other->batch_size_);
    std::swap(fx_, other->fx_);
    std::swap(fy_, other->fy_);
    std::swap(cx_, other->cx_);
    std::swap(cy_, other->cy_);
    std::swap(search_single_object_instance_, other->search_single_object_instance_);
    std::swap(search_single_object_in_group_, other->search_single_object_in_group_);
    std::swap(use_color_similarity_, other->use_color_similarity_);
    std::swap(similarity_coeff_, other->similarity_coeff_);
    std::swap(inliers_coeff_, other->inliers_coeff_);
    std::swap(clutter_coeff_, other->clutter_coeff_);
    std::swap(location_score_coeff_, other->location_score_coeff_);
    std::swap(pose_score_coeff_, other->pose_score_coeff_);
    std::swap(group_total_explain_coeff_, other->group_total_explain_coeff_);
    std::swap(group_common_explain_coeff_, other->group_common_explain_coeff_);
    std::swap(inliers_threshold_, other->inliers_threshold_);
    std::swap(clutter_threshold_, other->clutter_threshold_);
    std::swap(final_score_threshold_, other->final_score_threshold_);
    std::swap(cluster_eps_angle_threshold_, other->cluster_eps_angle_threshold_);
    std::swap(cluster_min_points_, other->cluster_min_points_);
    std::swap(cluster_curvature_threshold_, other->cluster_curvature_threshold_);
    std::swap(cluster_tolerance_near_, other->cluster_tolerance_near_);
    std::swap(cluster_tolerance_far_, other->cluster_tolerance_far_);
    std::swap(distance_threshold_, other->distance_threshold_);
    std::swap(are_objects_segmented_, other->are_objects_segmented_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Options::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Options_descriptor_;
  metadata.reflection = Options_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DetectorOptions

// @@protoc_insertion_point(global_scope)
